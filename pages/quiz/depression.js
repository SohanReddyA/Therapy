import Head from 'next/head';
import { useState } from 'react';
import Header from '../components/header';

export default function Depression(props) {
  const [count, setCount] = useState(0);
  const [current, setCurrent] = useState(props.data[count]);
  const [target, setTarget] = useState(0);
  const [score, setScore] = useState({
    0: '0',
    1: '0',
    2: '0',
    3: '0',
    4: '0',
    5: '0',
    6: '0',
    7: '0',
    8: '0',
    9: '0',
    10: '0',
    11: '0',
    12: '0',
    13: '0',
    14: '0',
    15: '0',
    16: '0',
    17: '0',
    18: '0',
  });
  function next() {
    let c = count;
    setCount(c + 1);
    let score1 = score;
    score1[String(count)] = String(target);
    setScore(score1);
    setCurrent(props.data[c + 1]);
  }
  function prev() {
    let c = count;
    setCount(c - 1);
    setCurrent(props.data[c - 1]);
  }
  function submit() {
    let sr = 0;
    let score1 = score;
    score1[String(count)] = String(target);
    setScore(score1);
    Object.keys(score1).forEach((key) => {
      sr += Number(score[key]);
    });
    console.log(sr);
    alert('Your score is '+sr)
  }
  return (
    <>
      <Head>
        <title>Therapy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-white h-screen">
        <div className="flex flex-col gap-8 m-auto p-10 bg-white max-w-[90rem]">
          <Header></Header>
          <div className="text-3xl  mt-[120px] items-center justify-center flex">
            <br /> Take the quiz now:{' '}
          </div>
          <form onSubmit={(e) => e.preventDefault()}>
            <div className="flex flex-col gap-4 px-16">
              <div className="text-xl items-center flex">
                {current.Question}
              </div>
              <div className="flex items-center mb-4">
                <input
                  id="country-option-1"
                  type="radio"
                  name="questions"
                  defaultChecked={score[count] == '0' ? true : false}
                  value="1"
                  onChange={(e) => {
                    setTarget(0);
                  }}
                  className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                  aria-labelledby="country-option-1"
                  aria-describedby="country-option-1"
                />
                <label
                  htmlFor="country-option-1"
                  className="text-lg font-medium text-gray-900 ml-2 block">
                  {current.Option1}
                </label>
              </div>

              <div className="flex items-center mb-4">
                <input
                  id="country-option-2"
                  type="radio"
                  name="questions"
                  onChange={(e) => {
                    setTarget(1);
                  }}
                  defaultChecked={score[count] == '1' ? true : false}
                  value="2"
                  className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                  aria-labelledby="country-option-2"
                  aria-describedby="country-option-2"
                />
                <label
                  htmlFor="country-option-2"
                  className="text-lg font-medium text-gray-900 ml-2 block">
                  {current.Option2}
                </label>
              </div>

              <div className="flex items-center mb-4">
                <input
                  id="country-option-3"
                  type="radio"
                  name="questions"
                  onChange={(e) => {
                    setTarget(2);
                  }}
                  defaultChecked={score[count] == '2' ? true : false}
                  value="3"
                  className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                  aria-labelledby="country-option-3"
                  aria-describedby="country-option-3"
                />
                <label
                  htmlFor="country-option-3"
                  className="text-lg font-medium text-gray-900 ml-2 block">
                  {current.Option3}
                </label>
              </div>

              <div className="flex items-center mb-4">
                <input
                  id="country-option-4"
                  type="radio"
                  name="questions"
                  onChange={(e) => {
                    setTarget(3);
                  }}
                  defaultChecked={score[count] == '3' ? true : false}
                  value="4"
                  className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                  aria-labelledby="country-option-4"
                  aria-describedby="country-option-4"
                />
                <label
                  htmlFor="country-option-4"
                  className="text-lg font-medium text-gray-900 ml-2 block">
                  {current.Option4}
                </label>
              </div>
              
              <div className="flex gap-4">
                {count != 0 ? (
                  <input
                    type="reset"
                    value={'Prev'}
                    className="bg-[#4F45E4] inline text-base inl text-white  py-2 px-4 rounded hover:shadow-2xl w-fit"
                    onClick={() => {
                      prev();
                    }}
                  />
                ) : null}
                {count != 20 ? (
                  <input
                    type="reset"
                    value={'Next'}
                    className="bg-[#4F45E4] inline text-base text-white  py-2 px-4 rounded hover:shadow-2xl w-fit"
                    onClick={() => {
                      next();
                    }}></input>
                ) : null}
                {count == 20 ? (
                  <button
                    className="bg-[#4F45E4] inline text-base text-white  py-2 px-4 rounded hover:shadow-2xl w-fit"
                    onClick={() => {
                      submit();
                    }}>
                    {' '}
                    Submit
                  </button>
                ) : null}
              </div>
            </div>
          </form>
        </div>
      </div>
    </>
  );
}

export async function getStaticProps(context) {
  const res = await fetch('https://therapy-mauve.vercel.app/api/quiz/depression');
  const data = await res.json();
  return {
    props: {
      data,
    },
  };
}
