import Head from 'next/head';
import { useState } from 'react';

export default function Home(props) {
  const [count, setCount] = useState(0);
  const [current, setCurrent] = useState(props.data[count]);
  const [target, setTarget] = useState(0);
  const [score, setScore] = useState({
    0:'0',
    1:'0',
    2:'0',
    3:'0',
    4:'0',
    5:'0',
    6:'0',
    7:'0',
    8:'0',
    9:'0',
    10:'0',
    11:'0',
    12:'0',
    13:'0',
    14:'0',
    15:'0',
    16:'0',
    17:'0',
    18:'0',
    19:'0',
    20:'0',
    21:'0',
  });
  function next() {
    let c = count
    setCount(c+1);
    let score1=score;
    score1[String(count)] = String(target);
    setScore(score1);
    setCurrent(props.data[c+1]);
  }
  function prev() {
    let c = count
    setCount(c-1);
    setCurrent(props.data[c-1]);
  }
  function submit() {
    let sr = 0
    let score1=score;
    score1[String(count)] = String(target);
    setScore(score1);
    Object.keys(score1).forEach(key => {
      sr += Number(score[key])
    });
    console.log(sr);
  }
  return (
    <>
      <Head>
        <title>Therapy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-slate-100 h-screen">
        <div className="flex flex-col gap-8 m-auto p-10 bg-slate-50 max-w-6xl">
          <div className="text-2xl flex  justify-between items-center font-normal">
            This survey is a derivation of an industry-standard method used by
            the best therapists first to assess their clients. Mental health is
            not a joke. Please answer the following questions with utmost
            sincerity without self-deception. No Email nor any Personal
            information is collected.
            <br />
            <br />
            <br />
            The BDI has good reliability and validity. The test-retest
            reliability of the BDI-II ranged from 0.73 to 0.92, which means that
            the scores are consistent over time. The internal consistency of the
            BDI-II was 0.9, which means that the items on the questionnaire
            relate to each other and measure the same construct
          </div>
          <div className="text-3xl items-center justify-center flex">
            {' '}
            Take the quiz now:{' '}
          </div>
          <div className="flex flex-col gap-4 px-16">
            <div className="text-xl items-center justify-center flex">
              {current.Question}
            </div>
            <div className="flex items-center mb-4">
              <input
                id="country-option-1"
                type="radio"
                name="questions"
                value="1"
                onClick={(e)=>{setTarget(0)}}
                className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                aria-labelledby="country-option-1"
                aria-describedby="country-option-1"
              />
              <label
                htmlFor="country-option-1"
                className="text-lg font-medium text-gray-900 ml-2 block">
                {current.Option1}
              </label>
            </div>

            <div className="flex items-center mb-4">
              <input
                id="country-option-2"
                type="radio"
                name="questions"
                onClick={(e)=>{setTarget(1)}}
                value="2"
                className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                aria-labelledby="country-option-2"
                aria-describedby="country-option-2"
              />
              <label
                htmlFor="country-option-2"
                className="text-lg font-medium text-gray-900 ml-2 block">
                {current.Option2}
              </label>
            </div>

            <div className="flex items-center mb-4">
              <input
                id="country-option-3"
                type="radio"
                name="questions"
                onClick={(e)=>{setTarget(2)}}
                value="3"
                className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                aria-labelledby="country-option-3"
                aria-describedby="country-option-3"
              />
              <label
                htmlFor="country-option-3"
                className="text-lg font-medium text-gray-900 ml-2 block">
                {current.Option3}
              </label>
            </div>

            <div className="flex items-center mb-4">
              <input
                id="country-option-4"
                type="radio"
                name="questions"
                onClick={(e)=>{setTarget(3)}}
                value="4"
                className="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300"
                aria-labelledby="country-option-4"
                aria-describedby="country-option-4"
              />
              <label
                htmlFor="country-option-4"
                className="text-lg font-medium text-gray-900 ml-2 block">
                {current.Option4}
              </label>
            </div>
            <div className="flex gap-4">
            {count != 0 ? (
              <button className="bg-[#4F45E4] inline text-base inl text-white  py-2 px-4 rounded hover:shadow-2xl w-fit" onClick={()=>{prev()}}>
                {' '}
                Prev
              </button>
            ) : null}
            {count != 20 ? (
              <button className="bg-[#4F45E4] inline text-base text-white  py-2 px-4 rounded hover:shadow-2xl w-fit" onClick={()=>{next()}}>
                {' '}
                Next
              </button>
            ) : null}
            {count == 20 ? (
              <button className="bg-[#4F45E4] inline text-base text-white  py-2 px-4 rounded hover:shadow-2xl w-fit" onClick={()=>{submit()}}>
                {' '}
                Submit
              </button>
            ) : null}
          </div></div>
        </div>
      </div>
    </>
  );
}
export async function getStaticProps(context) {
  const res = await fetch('http://localhost:3000/api/hello');
  const data = await res.json();
  return {
    props: {
      data,
    },
  };
}
